    Esta clase va a ser
        grabad
          a
              Clase 02. DATA SCIENCE
          Introducci√≥n a la 
         programaci√≥n con 
               Python I
       Temario
                          01                         02                        03
                 La necesidad de             Introducci√≥n a            Introducci√≥n a 
                  Informaci√≥n en                     la                        la 
                  la Industria 4.0           programaci√≥n               programaci√≥n 
                  ‚úì Industria 4.0                                        con Python 
                                               con Python               ‚úì Estructura de 
                                                                           (Parte II)
                  ‚úì Transformaci√≥n digital       (Parte I)                  control
                                              ‚úì Definici√≥n de 
                  ‚úì  Ciclo de vida de un          programa              ‚úì Funciones
                     proyecto de ciencia de   ‚úì Instalaci√≥n de 
                     datos                        Python                ‚úì Datos
                  ‚úì  Valor y retorno de la                              ‚úì IPython
                     Ciencia de Datos         ‚úì Nociones 
                  ‚úì Estrategia data-driven        b√°sicas               ‚úì Instalaci√≥n
    Objetivos de la clase
                 Realizar una primera aproximaci√≥n al lenguaje 
                 de programaci√≥n Python.
                 Conocer las distintas formas de desarrollo con 
                 Python.
        MAPA DE CONCEPTOS
                              Programaci√≥n y 
       Toma de                lenguajes
       contacto con                               Python como 
       Python                                     lenguaje
                              Interpretado vs 
                              Compilado           Basics: Variables, 
                                                  asignaci√≥n, 
                                                  operaciones
                              Python tradicional
       Formas de                                  Estructuras
       desarrollo con 
       Python
                              IPython y notebooks
                                                  Funciones
                                                  Tipos de datos
      Cuestionario de tarea
   ¬øTe gustar√≠a comprobar tus 
   conocimientos de la clase anterior?
   Te compartimos a trav√©s del chat de 
   Zoom / chat de la plataforma el enlace a un 
   breve cuestionario de Kahoot.
   Duraci√≥n: 10 minutos
    Librer√≠a Pandas
    Estructuras fundamentales series
         y Data Frames
   Indexamiento de series y Data Frames
   Datos nulos 
   Tambi√©n aprendimos a leer archivos planos (.txt, .csv, .xlsx) locales o por APIs en Python.
      Definici√≥n de
       programa
    Desde el principio: 
     programaci√≥n y 
        Python
    ¬øQu√© es la programaci√≥n?
     ‚úî La programaci√≥n es una forma de 
       ejecutar un algoritmo.
     ‚úî Un algoritmo es una secuencia de 
       pasos que lleva a un resultado.
     ‚úî Una receta es un algoritmo.
     ‚úî Si se sigue el algoritmo, se llega al 
       resultado.
      Programa y computadora
        ‚úî La computadora naci√≥ para 
           resolver c√°lculos.                           ‚úî La computadora entiende 
        ‚úî La programaci√≥n es un                            ceros y unos (lenguaje 
           complemento para la                             binario), nosotros no.
           computadora.                                 ‚úî Por lo tanto, un programa 
        ‚úî Es una forma de que la computadora               traduce un lenguaje 
           entienda el funcionamiento de                   humano a lenguaje 
           un algoritmo y lo ejecute.                      binario.
      Programaci√≥n y lenguajes
        ‚úî No existe un solo lenguaje que               ‚úî Para Data Science, existen 
           solucione todos los problemas                  algunos lenguajes que 
        ‚úî Cada lenguaje resuelve un                       funcionan muy bien: 
           conjunto de problemas posibles:                Python, R, Julia y Scala 
           Empresariales, Web, Ciencia, Salud,            son algunos de ellos.\
           etc.
                 Python              R                 Julia          Scala
       Lenguaje 
     interpretado vs. 
       compilado
       ¬øInterpretado o Compilado?
                                                        ‚úî Usa un programa int√©rprete que 
                                                           traduce en tiempo casi real nuestras 
       Python es un lenguaje interpretado,                 √≥rdenes a binario.
       esto quiere decir que:
                                                        ‚úî La traducci√≥n se hace l√≠nea por 
                                                           l√≠nea.
                                                        ‚úî Podemos probar c√≥digo ‚Äúde a 
                                                           pedacitos‚Äù.
                                                        ‚úî El lenguaje compilado se traduce 
                                                           todo junto al final.
                                                        ‚úî No es simplemente una mejora, es 
                                                           una forma de trabajar muy √∫til para 
                                                           Data Science.
      Python como 
       lenguaje
      PARA RECORDAR
   Contenido destacado
   Python es el lenguaje m√°s solicitado en las 
   b√∫squedas laborales relacionadas con Data Science 
   y se ubica entre el segundo y tercer puesto en 
   2021 de acuerdo a varios rankings de lenguajes de 
   desarrollo general (no s√≥lo Data Science).
       PARA RECORDAR
    En otras palabras, Python no puede faltar 
    en un portfolio de Data Science.
      Python en 
      pocas palabras
      Lenguaje Open Source: un c√≥digo abierto y                         REEMPLAZAR 
      accesible dise√±ado para que cualquier pueden ver,                 POR IMAGEN
      modificar y distribuirlo.
      Creado por Guido Van Rosssum y su primera 
      versi√≥n se dio en 1991 en el CWI (Centrum 
      Wiskunde Inform√°tica)
        Python, Open Source: 
        componentes
                            1                            2                           3
                      Int√©rprete                        IDE                     Paquetes
                        programa                    entorno de                 conjuntos de 
                        int√©rprete,              desarrollo, lugar             funciones pre-
                        traductor a                    donde                   armadas para 
                          binario.                 escribiremos                  problemas 
                                                      c√≥digo.                   habituales.
      Instalaci√≥n de 
       Python v√≠a 
       miniconda
     Python tradicional
    Anaconda y 
    Miniconda
    Tradicionalmente, Python puede 
    desarrollarse en Anaconda, o en su 
    versi√≥n simplificada, Miniconda.
    A su vez, puede utilizarse de 
    varias formas m√°s:
       Formas
       La forma m√°s b√°sica es escribiendo            Otra forma m√°s √∫til es usando Python 
       python en la terminal, lo que abre un         interactivo (IPython). Puede accederse 
       entorno de trabajo dentro de la misma         escribiendo ipython en la terminal.
       terminal.
                                                      Ì≥¢Ì†Ω No aporta muchas mejoras si se usa de 
        Ì≥¢Ì†Ω No es la forma m√°s c√≥moda, ni la m√°s      esa forma.
       utilizada.
                                                     ¬°No siempre es la mejor forma! 
     Jupyter notebooks
       IPython y notebooks
                                                       ‚úî Escribimos c√≥digo en el navegador 
       Las notebooks siguen siendo IPython,               que resulta ser el IDE.
       pero con vitaminas Ì≥¢Ì†Ω                           ‚úî El c√≥digo pasa por el mismo 
                                                          int√©rprete que es el que usa la 
                                                          terminal, pero todo se trabaja en el 
                                                          navegador.
                                                       ‚úî El c√≥digo se escribe en cajas de 
                                                          texto que pueden ejecutarse de a 
                                                          una o todas juntas.
                                                       ‚úî El conjunto total de cajas de texto es 
                                                          una notebook.
                                                     Ì≥¢Ì†Ω Esta configuraci√≥n es de las m√°s 
                                                     utilizadas para Data Science.
    IPython y notebooks
    Podemos encontrar 4 partes principales:
     1. Nombre del notebook (termina con 
       extensi√≥n .ipynb)
     2. Barra de men√∫: Permite ejecutar 
       c√≥digo y opciones gen√©ricas 
     3. Toolbar: Permite ejecutar celdas de 
       c√≥digo, guardar, a√±adir, borrar, 
       cortar o pegarlas
     4. Celdas de C√≥digo: Pueden ser 
       Markdown (texto) o C√≥digo Python
    ¬øC√≥mo usar Google 
        Collab?
       Google Colab
       Permite trabajar en un entorno no local y         ‚úî Es un producto de Google Research. 
       la creaci√≥n de Notebooks Ì≥¢Ì†Ω                          Est√° especialmente adecuado para 
                                                            tareas de aprendizaje autom√°tico, 
                                                            an√°lisis de datos y educaci√≥n.
                                                         ‚úî Jupyter es el proyecto de c√≥digo 
                                                            abierto en el que se basa Colab.
                                                         ‚úî Nos permite compartir notebooks sin 
                                                            la necesidad de descargar ning√∫n 
                                                            software extra.
                                                         ‚úî El c√≥digo se ejecuta en una m√°quina 
                                                            virtual dedicada a tu cuenta y 
                                                            pueden eliminarse luego de cierto 
                                                            tiempo.
      Ejemplo en vivo
   ¬øC√≥mo podemos usar Google Colab como 
   un entorno para programar lenguaje de 
   Python?
   ¬°Vamos a verlo conjuntamente!
       C√≥mo usar Google Colab
       Si queremos crear un modelo de              Google Colaboratory es un entorno de 
       aprendizaje autom√°tico, pero no tienen      port√°til Jupyter, gratuito proporcionado 
       una computadora que pueda asumir la         por Google donde puede usar GPU y TPU 
       carga de trabajo, Google Colab es la        gratuitas que pueden resolver todos estos 
       plataforma ideal.                           problemas.
       Incluso si tiene una GPU o una buena 
       computadora, crear un entorno local con 
       anaconda e instalar paquetes y resolver 
       problemas de instalaci√≥n es una molestia.
    C√≥mo usar Google Colab
                              EXAMPLES: Contiene ejemplos de 
                              Jupyter notebooks con diversos 
                              ejemplos.
                              RECENT: Jupyter notebooks que has 
                              trabajado recientemente.
                              GOOGLE DRIVE: Jupyter notebooks en 
                              tu google drive.
                              GITHUB: Puedes a√±adir Jupyter 
                              notebooks desde Github pero es 
                              necesario conectar Colab con GitHub.
                              UPLOAD: Si deseas subir un Jupyter 
                              notebook desde tu equipo local.
    Ir al siguiente enlace: https://colab.research.google.com
    C√≥mo usar Google Colab
    De lo contrario, puede crear un nuevo 
    cuaderno de Jupyter haciendo clic en 
    Nuevo cuaderno de Python3 o Nuevo 
    cuaderno de Python2 en la esquina 
    inferior derecha.
    Al crear un nuevo cuaderno, crear√° un 
    cuaderno Jupyter llamado 
    Untitled0.ipynb y lo guardar√° en su 
    unidad de Google en una carpeta llamada 
    Colab Notebooks. Todos los comandos de 
    los cuadernos de Jupyter funcionar√°n 
    aqu√≠.
        IDE‚Äôs
      IDE‚Äôs
      Son aplicaciones de software que            ‚úî Editor de c√≥digo.
      permiten a programadores desarrollar        ‚úî Depuradores (Debuggers) que 
      c√≥digo en diferentes lenguajes.                permiten encontrar errores en el 
      Consta, usualmente, de:                        c√≥digo 
                                                  ‚úî Herramientas autom√°ticas
                       IDE‚Äôs para el 
                       desarrollo de 
                       Python
                       Permite trabajar en un entorno no local y la creaci√≥n de 
                       Notebooks Ì≥¢Ì†Ω
                       Las herramientas que mostramos anteriormente no son 
                       las √∫nicas en donde compilar c√≥digo de Python‚Ä¶
            ¬°Atenci√≥n!
     Recuerda instalar Python con Anaconda para la 
              pr√≥xima clase.
                Ver tutorial
                 ‚òï
               Break
               ¬°10 minutos y 
                volvemos!
     Nociones b√°sicas: 
    Variable, asignaci√≥n, 
      expresiones
        Variable
       Variables
       Las variables se utilizan para almacenar        Es √∫til pensar en las variables como 
       informaci√≥n para ser referenciada y             contenedores de informaci√≥n. 
       manipulada en un programa de                    Su √∫nico prop√≥sito es etiquetar y 
       computadora.                                    almacenar datos en la memoria. 
       Proporcionan una forma de etiquetar los 
       datos con un nombre descriptivo, para 
       que los programas puedan ser entendidos 
       con mayor claridad. 
    Variables
    Los tipos de datos est√°ndar o 
    integrados de Python: 
    a) Num√©rico 
    b) Tipo de secuencia 
    c) Booleano 
    d) Conjuntos 
    e) Diccionario 
       Asignaci√≥n
                       Asignaci√≥n
                       Nombrar variables es una tarea compleja. 
                       Cuando nombre variables, piense detenidamente en los 
                       nombres (Comprensible).
                       La asignaci√≥n de lleva a cabo por medio del s√≠mbolo =
                       El nombre de la variable va a la izquierda y el valor que 
                       desea almacenar en la variable va a la derecha.
      Asignaci√≥n
      Reglas para asignaci√≥n de variables        ‚úî Los nombres de las variables 
      en Python                                      distinguen entre may√∫sculas y 
        ‚úî El nombre de una variable debe             min√∫sculas (nombre, Nombre y 
           comenzar con una letra o el car√°cter      NOMBRE son tres variables 
           de subrayado.                             diferentes).
        ‚úî Un nombre de variable no puede         ‚úî Las palabras reservadas (palabras 
           comenzar con un n√∫mero.                   clave) no se pueden usar para 
        ‚úî  Un nombre de variable solo puede          nombrar la variable.
           contener caracteres alfanum√©ricos y 
           guiones bajos (A-z, 0-9 y _).
    Objetos y punteros
       Objetos y punteros
       Python es un lenguaje orientado a objetos       ‚úî Datos
       Es as√≠ que en Python todo es un objeto, o       ‚úî Metadatos, atributos o propiedades 
       sea, cuenta con:                                   (un punto y una palabra sin 
                                                          par√©ntesis):
                                                          X.atributo Ì≥¢Ì†Ω Un atributo caracteriza 
                                                          al dato
                                                       ‚úî Funcionalidad o m√©todos (un punto y 
                                                          una palabra con par√©ntesis):
                                                          x.m√©todo()  Ì≥¢Ì†Ω Un m√©todo es algo 
                                                          que el dato puede hacer, por lo 
                                                          tanto al ejecutarlo le estamos 
                                                          pidiendo al dato que ejecute una 
                                                          acci√≥n
  x=1.0
  x.is_integer() # ¬øes x un entero? se lo preguntamos con el m√©todo is_integer()
  x=1.4
  x.is_integer() # ¬øy ahora? se lo preguntamos de vuelta
  print(x.real,x.imag)  # miramos los atributos de x, en este caso su parte real 
               # y su parte imaginaria
    Objetos y punteros
    Las variables en Python no contienen 
    los datos, sino que apuntan a los 
    datos. 
    Esta es la forma de trabajo de los 
    punteros, lo que hace que el lenguaje 
    sea m√°s eficiente.
           Para pensar
    ¬øCu√°les son las salidas de los siguientes 
    bloques de c√≥digo?
                               Contesta mediante el chat de 
                               Zoom 
  ¬øNo notaste algo raro en el 
  ejercicio anterior...?
       Objetos y punteros
       Cuando operamos sobre una variable          Cuando realizamos una asignaci√≥n (=) 
       (m√©todo) operamos sobre el objeto al        conectamos (apuntamos) la variable 
       que apunta.                                 al objeto. Aqu√≠ no cambiamos el objeto.
        Objetos y punteros
        x = [1, 2, 3]     # x es una lista
        y = x                   # el objeto al que apunta x ([1, 2, 3]) ahora es tambi√©n 
                                # apuntado por y
        print(y is x)     # x e y son el mismo objeto (True)
        print(x,y)        # [1, 2, 3] [1, 2, 3]
        x.append(4)             # aqu√≠ oper√≥ sobre el objeto [1, 2, 3] apuntado por x.
                                # Los m√©todos se identifican luego de un punto (x.m√©todo())  
        print(y)          # como x e y apuntan al mismo objeto, y refleja los cambios
        x = "hola"              # al realizar asignaci√≥n, ahora x apunta al objeto texto 
                                # (string) "hola" 
        print(x is y)     # x e y ahora no apuntan al mismo objeto (False)
        print(x,y)        # x e y apuntan a dos objetos diferentes (‚Äúhola‚Äù [1, 2, 3, 4])
  Objetos y punteros
  La diferencia es muy sutil y en general no 
  afecta el trabajo de Data Science. No 
  obstante, no todos los lenguajes se 
  comportan as√≠.
  ‚ö†  Hay que tener en cuenta esto para no 
  cometer errores. 
  ‚úîUn m√©todo comienza por un punto 
    despu√©s de la variable.
  ‚úîEl m√©todo modifica el objeto 
    apuntado por la variable.
  ‚úîLa variable no es, ni contiene al 
    objeto.
  ‚úîLa asignaci√≥n ‚Äúconecta‚Äù a la variable 
    con el objeto apuntado.
      Expresiones
       Expresiones
       Una expresi√≥n es una combinaci√≥n de                                  REEMPLAZAR 
       operadores y operandos que se interpreta                             POR IMAGEN
       para producir alg√∫n otro valor. 
       En cualquier lenguaje de programaci√≥n, una 
       expresi√≥n se eval√∫a seg√∫n la precedencia de 
       sus operadores. 
     Expresiones
     Expresiones constantes: son las 
     expresiones que solo tienen valores 
     constantes.
     x = 15 + 1.3                 Ì±âÌ†Ω   16.3
     print(x)
     Expresiones
     Expresiones aritm√©ticas: una expresi√≥n 
     aritm√©tica es una combinaci√≥n de valores 
     num√©ricos, operadores y, a veces, 
     par√©ntesis. 
       x = 40
       y = 12                        Ì±âÌ†Ω    52
                                           28
        add = x + y                        480
       sub = x - y                         3.3333333333333335
       pro = x * y
       div = x / y
       print(add);print(sub);print(pro);print(div)
     Expresiones
     Expresiones integrales: este es el tipo 
     de expresiones que producen solo 
     resultados enteros despu√©s de todos los 
     c√°lculos.
        a = 13
        b = 12.0                      Ì±âÌ†Ω    25
         c = a + int(b)
        print(c)
     Expresiones
     Expresiones flotantes: este es el tipo 
     de expresiones que producen n√∫meros de 
     punto flotante como resultado de todos 
     los c√°lculos
     a = 13
     b = 5                         Ì±âÌ†Ω    2.6
      c = a / b
     print(c)
       Operadores
                       Operadores
                       ‚úî Los operadores permiten trabajar sobre las 
                         variables, a la manera de las operaciones 
                         matem√°ticas.
                       ‚úî Cada operador da un resultado como salida.
                       ‚úî Identificamos 4 tipo de operadores:
                             ‚úì Operadores aritm√©ticos
                             ‚úì Operadores de asignaciones
                             ‚úì Operadores de identidad y pertinencia
         Operadores aritm√©ticos
           Los operadores aritm√©ticos son directamente 
           operaciones matem√°ticas est√°ndar.
                                         Aritm√©ticos
                            a + b                                           Suma
                             a - b                                          Resta
                             a * b                                 Multiplicaci√≥n
                             a / b                                       Divisi√≥n
                            a // b      Divisi√≥n entera (resultado sin decimal)
                            a % b           M√≥dulo (resto de la divisi√≥n entera)
                           a ** b                                Exponenciaci√≥n
                                -a                                      Negativo
       Operadores de                                                     Asignaciones
       asignaciones                                                    a += b              a = a + b
                                                                        a -= b              a = a - b
       Los asignadores simplifican operadores aritm√©ticos              a *= b              a = a * b
       comunes.                                                         a /= b              a = a / b
                                                                       a //= b             a = a // b
                                                                       a %= b              a = a % b
                                                                       a **= b            a = a ** b
                  Comparadores                      Operadores de 
                a == b            a igual a b
                 a != b       a distinto de b       comparaci√≥n
                  a < b          a menor a b
                  a > b          a mayor a b        Los comparadores dan resultados l√≥gicos (si/no, 
                        a menor o igual que         true/false)
                a <= b                      b
                        a mayor o igual que 
                a >= b                      b
       Operadores de 
       identidad y                                                  Identidad y pertenencia
                                                                                 a es el mismo objeto 
       pertenencia                                                        a is b             que b
                                                                               a no es el mismo objeto 
        ‚úî Los operadores de identidad y pertenencia                    a is not b            que b
           verifican relaciones entre objetos.                           a in b  a est√° contenido en b
        ‚úî Dentro de esta categor√≠a, los operadores ‚Äúin‚Äù,              a not in b a no est√° contenido en b
           como casos particulares, buscan objetos 
           dentro de listas. ¬°Son muy √∫tiles!
       Uso de filtros booleanos
        Los operadores nos permiten crear filtros booleanos que ayudan a obtener filtros 
        r√°pidos para informaci√≥n de inter√©s
       import pandas as pd                                    index_bool=df['Eo']>10
       import numpy as np                                     index_bool
       df= pd.DataFrame(data=np.random.randint(64, 
       size=(8,8)),columns=['Ja','Mu','Ct','Dn','Eo','Tp','Yn','Om'])
       print(df)                                              df['Eo'][index_bool]
         Ja  Mu  Ct  Dn  Eo  Tp  Yn  Om                       0    41
       0  26  41  62  50  41  52  49  35                      1    18
       1   4  13  37   4  18   7  30  43
       2  57  19  41  55  53  15  14  57                      2    53
       3  47   6  53  47  58  15  39  49                      3    58
       4  61  32  53  15  48  56  42  20                      4    48
       5  60  56  40  55   7  32  51  13                      6    48
       6  45   9  29  21  48  43  61  30
       7  44   5  27  59   6  47   7  46                      Name: Eo, dtype: int64
      Ejemplo en vivo
   Examinemos un poco lo que se conoce 
   como estructuras de control
       Para pensar
   ¬øQu√© diferencia hay entre usar and/or? 
   ¬øQu√© significa el operador %?
                          Contesta 
                          mediante el 
                          chat de 
                          Zoom 
       CLASE N¬∞2
       Glosario
       Programaci√≥n: formas de ejecutar un algoritmo      Variable: Cualquier estructura que permita 
       (recetas)                                          almacenar informaci√≥n para su manipulaci√≥n
       Lenguajes: herramientas computacionales que        Asignaci√≥n: Proceso mediante el cual se le 
       permiten resolver problemas con estructuras de     asigna un valor particular a una variable 
       c√≥digo. En Data Science existen varios comunes: 
       Python , R , Java, Julia, C, C++                   Punteros: herramientas que nos permiten 
                                                          conectar a las variables con sus valores 
       Lenguaje interpretado: cualquier lenguaje de       respectivos
       programaci√≥n que se ejecute l√≠nea a l√≠nea y que 
       convierta las √≥rdenes a formato binario (e.g       Expresiones: combinaciones de operadores y 
       Python , R)                                        operandos que dan como resultado un valor 
                                                          particular
       IDE: aplicaciones donde escribimos el c√≥digo de 
       un lenguaje particular (e.g Spyder, Kite, Visual   Operadores: son los que permiten trabajar 
       Studio, Atom)                                      sobre las variables, pueden ser de 4 tipos 
                                                          (aritm√©ticos, relacionales, de asignaci√≥n y 
                                                          l√≥gicos)
      ¬øPreguntas?
                   Resumen 
               de la clase hoy
              ‚úì Definici√≥n de Programa
              ‚úì Lenguaje Interpretado vs compilado
              ‚úì Python como Lenguaje
              ‚úì Nociones b√°sicas: variable, asignaci√≥n y 
                expresiones
              ‚úì Objetos y punteros
      Opina y valora 
       esta clase
        Muchas 
        gracias.
