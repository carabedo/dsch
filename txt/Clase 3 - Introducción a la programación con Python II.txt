    Esta clase va a ser
        grabad
          a
              Clase 03. DATA SCIENCE
          Introducci√≥n a la 
         programaci√≥n con 
               Python II
     Temario
                    02                 03                  04
              Introducci√≥n a      Introducci√≥n a      Introducci√≥n a 
                    la                  la           librer√≠a cient√≠fica 
              programaci√≥n        programaci√≥n         con Python: 
                                                      Pandas (Parte I)
               con Python          con Python 
                                   ‚úì Estructura de   ‚úì Estructura de 
                 (Parte I)          (Parte II)
                                     control            datos en Pandas 
               ‚úì Definici√≥n de 
                  programa         ‚úì Funciones       ‚úì Manipulaci√≥n de 
               ‚úì Instalaci√≥n       ‚úì Tipo de datos      Datos en Pandas
               ‚úì Nociones          ‚úì IPython         ‚úì Lectura de 
                  b√°sicas                               archivos con 
                                   ‚úì Instalaci√≥n        Python
    Objetivos de la clase
                 Conocer las distintas formas de desarrollo con 
                 Python
                 Comprender las nociones b√°sicas de la 
                 programaci√≥n estructurada.
        MAPA DE CONCEPTOS
                                        Basics: Variables, 
                                        asignaci√≥n, 
                                        operaciones
                                        Estructuras
                  Nociones b√°sicas 
                  de Programaci√≥n
                                        Funciones
                                        Tipos de datos
       ¬øRepasamos?
   Introducci√≥n a la 
   programaci√≥n Python
     ‚úì Definici√≥n de Programa (Lenguaje compilado 
       vs interpretado)
     ‚úì Introducci√≥n a Python
     ‚úì Nociones b√°sicas: variable asignaci√≥n, 
       expresiones
     ‚úì Objetos y punteros
     ‚úì Operadores: aritm√©ticos, de asignaciones, de 
       comparaci√≥n y de identidad y pertenencia.
   ¬°Vamos a Kahoot!
      Estructuras de 
        control
      Estructuras de 
        control:
      FOR, WHILE, IF
    ¬øQu√© son y para qu√© 
    sirven?
          ‚úì Las estructuras de control sirven           ‚úì Las estructuras de control m√°s 
             para dar claridad y orden al                  comunes son: 
             c√≥digo. 
                                                           Ì±âÌ†Ω For
          ‚úì Si hay que hacer operaciones 
             repetitivas, estas estructuras nos            Ì±âÌ†Ω While
             ayudan a organizarlas.                        Ì±âÌ†Ω If
                                                           Ì±âÌ†Ω Switch (Otros lenguajes e.g C)
    Estructuras                                Estructuras 
    de selecci√≥n                               de ciclos 
    para                                       para 
    generaci√≥n                                 ejecuciones 
    de                                         repetitivas 
    condiciones
       Estructura 
     condicional FOR
          Estructura FOR
            ‚úì Repite un comando una cantidad fija de veces
       for i in range(1,10):
           print(i)                   # muestra los n√∫meros del 1 al 9
       for i in [1,4,6,2]:
           print(i)                   # muestra los n√∫meros de la lista
       Estructura 
     condicional WHILE
       Estructura WHILE
        ‚úì Repite una secuencia de comandos ‚Äúmientras‚Äù una condici√≥n se cumpla. 
            Cuando la condici√≥n no se cumple m√°s, termina la repetici√≥n.
                                           i = 1
                                           while i < 10:      # el c√≥digo luego de los dos puntos se ejecuta
                                                 print(i)     # mientras i es menor a 10.
                                                 i += 1             # cuando i llega a 10 termina la ejecuci√≥n
       Estructura 
      condicional IF
           Estructura condicional 
           (IF)
             ‚úì Si se cumple una condici√≥n, se ejecuta una secuencia de comandos. En 
                  otro caso, se ejecuta otra. 
             ‚úì Pueden manejarse m√°s de dos opciones.
                  x = 1
                  if x < 10:                                  # Pregunto si x es menor a 10
                      print(x, "es menor a 10")  # Si es as√≠ muestro mensaje
                  elif x > 10:                          # Si no es as√≠, pregunto si x es mayor
                      print(x, "es mayor a 10")  # a 10 y si es as√≠ muestro mensaje
                  else:                                       # Si nada de lo anterior se
                      print(x, "es 10")                 # cumple, ejecuto esto
         Estructura condicional 
         (IF)
              Diagrama de flujo condicionales                  Estructura if-elif-else Python
        Actividad colaborativa
   Probando estructuras en Python
   Deber√°n resolver en grupo dos problemas 
   reales, utilizando las estructuras 
   aprendidas de programaci√≥n en Python en 
   una notebook.
   Duraci√≥n: 15 minutos
             ACTIVIDAD COLABORATIVA
        Acuerdos
       Presencia                                       Apertura al aprendizaje
        ‚úì Participar y ‚Äúestar‚Äù en la clase, que          ‚úì Siempre, pero siempre puedes 
            tu alrededor no te distraiga                    seguir aprendiendo. Compartir el 
                                                            conocimiento es v√°lido, la 
       Escucha activa                                       construcci√≥n colaborativa es la 
                                                            propuesta.
        ‚úì Escuchar m√°s all√° de lo que la 
            persona est√° expresando 
            directamente                               Todas las voces
                                                         ‚úì Escuchar a todos, todos podemos 
                                                            reflexionar. Dejar el espacio para 
                                                            que todos podamos participar.
            ACTIVIDAD COLABORATIVA
       Optimizando el stock 
       para una PYME
       Consigna: Se tiene una lista con                ‚úî Sugerencia: Crear otra lista   
       Valores= [200, 225, 232, 221, 243, 256,       Dias=['Lunes','Martes','Miercoles','Jueves','V
       255] que representan los precios de una       iernes','Sabado','Domingo']
       acci√≥n de la compa√±√≠a X la semana                   para hacer la iteraci√≥n y utilice un 
       pasada (cada dato representa el promedio            ciclo con la siguiente estructura 
       diario)                                             for x,y in zip(Dias,Valores): hacer uso 
       Escribir el c√≥digo para calcular los d√≠as de 
       la semana donde hubo un retroceso                   de la funci√≥n np.diff y de 
       respecto al d√≠a anterior en el valor de la          condicionales
       acci√≥n de la compa√±√≠a X.
       NOTA: usaremos los breakouts rooms. El tutor/a tendr√° el rol de facilitador/a.
          probando estructuras en 
          python
          for - if - while
                             Dias= 
         Ejercicio 1:        ['Lunes','Martes','Miercoles','Jueves','Viernes','Sabado','Domingo']
                             Valores= [200, 225, 232, 221, 243, 256, 255]
         Soluci√≥n            import numpy as np
                             Dif= np.diff(Valores, n=1)
                             for x,y in zip(Dias[1:],Dif):
                              if (x!= 'Lunes') & (y<0):
                                print(x,y)
                              
       Funciones, 
      argumentos y 
        retorno
       Funciones
                        Funcione
                        s
                       ‚úì Para trabajar profesionalmente en programaci√≥n, 
                         el c√≥digo que se usa en forma repetitiva se 
                         organiza en funciones. 
                       ‚úì Puede hacerse una analog√≠a con una funci√≥n 
                         matem√°tica y = f(x): la funci√≥n f recibe un 
                         argumento x, ejecuta una serie de comandos y 
                         devuelve un valor y.
      Argumentos y 
        retorno
    Argumentos y 
    retorno
    Las funciones tienen al menos 3 elementos:
    Ì±âÌ†Ω El nombre de la funci√≥n
    Ì±âÌ†Ω Cero o m√°s argumentos (variables de entrada)
    Ì±âÌ†Ω Un valor de retorno (salida de la funci√≥n) 
        Sintaxis de una 
        funci√≥n
         print(x)          # funci√≥n nativa de Python que muestra el valor de x
         print(x,y)        # print puede mostrar los valores de m√°s de una variable
         def suma(x,y): # aqu√≠ definimos una funci√≥n propia con argumentos x e y
             z = x + y     # la funci√≥n suma los valores x e y, y asigna resultado a z
             return z      # el valor de retorno es z
         res = suma(2,3)         # aplicamos la funci√≥n definida a los n√∫meros 2 y 3
                                 # y guardamos el resultado en res
         print (res)       # mostramos el resultado: 2 + 3 = 5
       Ejemplo
       def suma(x,y): # Aqu√≠ definimos una funci√≥n ‚Äúsuma‚Äù. 
           z = x + y # Esto es lo que pide el ejercicio
           return z
       res = suma(2,3)    # Aqu√≠ probamos la funci√≥n suma con dos n√∫meros concretos
                          # Esta es la prueba para verificar que el c√≥digo funciona
       print (res)
      Ejemplo en vivo
   ¬øC√≥mo el uso de funciones permite resolver 
   un problema real?
         Ejemplo aplicado de 
         funciones
           Un inversor financiero est√°                       Tambi√©n sabe que la probabilidad 
           interesado en invertir en la                      de obtener ganancias 
           compa√±√≠a. Se propone comprar                      (aproximadamente 15% en cada 
           durante cada d√≠a de la semana                     inversi√≥n) es de 0.56 y la 
           20 acciones.                                      probabilidad de perder el 18% 
                                                             es 0.44 (Solo hay esas dos 
                                                             opciones).
        Ejemplo aplicado de 
        funciones
         ‚úì ¬øCu√°l ser√≠a el valor esperado al        El precio de la acci√≥n cada d√≠a entre 
            final  de  la  semana  para  el        Lunes-Domingo es: Valores= [200, 
            inversor?                              225, 232, 221, 243, 256, 255]
         ‚úì Crear una funci√≥n llamada 
            retorno_semanal que calcule el         Pueden utilizar la siguiente f√≥rmula:
            valor esperado con la cantidad 
            de acciones compradas cada 
            d√≠a, probabilidad de ganancia 
            y no ganancia
                 ‚òï
               Break
               ¬°10 minutos y 
                volvemos!
      Tipos de datos
     Tipos de datos en 
        Python
      Tipo de dato
     ‚úì Define qu√© tipos de operaciones se puede 
        hacer con √©l. Por ejemplo, un n√∫mero se              REEMPLAZAR 
        puede sumar, pero un texto no.                       POR IMAGEN
     ‚úì Python define dos grandes grupos de tipos 
        de datos: simples y estructurados.
     ‚úì Podemos saber el tipo de un dato x con la 
        funci√≥n type(x)
      Fuente: Mixtrategy.com
      Datos Simples
       ‚úì Los tipos de datos simples est√°n formados por un solo objeto de un solo tipo
               Tipo     Ejemplo            Definici√≥n
                int     x = 1              Enteros
               float    x = 1.0       Punto flotante (decimales)
              complex  x = 1 + 2j   Complejos (parte real e imaginaria)
               bool    x = True    Booleanos o l√≥gicos: verdadero / falso
                str    x = 'abc'            Texto
              NoneType x = None   Tipo especial para indicar valores nulos
          Datos 
          ‚úì Los tipos de datos estructurados est√°n formados por m√°s de un objeto.
          Estructurados
          ‚úì El m√°s utilizado es list, pero no es la √∫nica forma de trabajar con este tipo 
              de datos.
                   Tipo         Ejemplo                        Definici√≥n
                    list        [1, 2, 3]                    Lista ordenada
                   tuple        (1, 2, 3)                Lista ordenada inmutable
                   dict        {'a':1, 'b':2,     Diccionario: conjunto de pares clave:valor
                                 'c':3}
                    set         {1, 2, 3}      Conjunto, a la manera de un conjunto matem√°tico
      Mutabilidad
          Mutabilidad
           ‚úì La estructura list es mutable 
               porque permite que sus                    ‚úì La estructura dict, por su 
               elementos sufran modificaciones               parte, es mutable en sus 
               una vez definida.                             valores. Sin embargo, es 
           ‚úì Por otro lado, las estructuras                  inmutable en sus claves.
               inmutables como las tuplas 
               (tuple) no admiten esta 
               reasignaci√≥n de elementos en 
               tiempo de ejecuci√≥n del 
               programa.
    IPython, trabajo con 
       Notebooks
    Creando un jupyter 
       notebook
          IPython y 
          notebooks
          La clase pasada hablamos un poco             Esto imprimir√° cierta informaci√≥n 
          sobre los notebooks. Veamos un poco          sobre el notebook server en su 
          m√°s a detalle el temaÌ±âÌ†Ω                      terminal, incluida la URL de la 
          Para iniciar el cuaderno jupyter, se         aplicaci√≥n web (de forma 
          debe escribir el siguiente comando en        predeterminada, http: // localhost: 
          la terminal:                                 8888) y luego abrir√° su navegador 
                                                       web predeterminado a esta URL.
               jupyter notebook
    IPython y 
    Una vez que se abre, ver√°n un 
    notebooks
    panel, que mostrar√° una lista de 
    archivos y subdirectorios en el 
    directorio donde se inici√≥ el 
    servidor de la libreta. 
    La mayor√≠a de las veces, desear√≠a 
    iniciar un servidor de notebooks 
    en el directorio de nivel m√°s alto 
    que contenga cuadernos. A 
    menudo, este ser√° su directorio 
    de inicio.
    IPython y 
    notebooks
    Para crear un nuevo cuaderno, 
    haga clic en el bot√≥n nuevo (New) 
    en la esquina superior derecha. 
    Haga clic en √©l para abrir una lista 
    desplegable y luego, si hace clic 
    en Python3, se abrir√° un nuevo 
    cuaderno.
  IPython y 
  notebooks
     Celdas en jupyter 
       notebook
    Celdas
    Las celdas pueden considerarse 
    como el cuerpo del Jupyter. 
       Existen tres tipos de celdas:
     1. C√≥digo
     2. Markdown
     3. Raw NBConverter
    1.C√≥digo
    Es donde se escribe el c√≥digo y, 
    cuando se ejecuta, el c√≥digo 
    mostrar√° la salida debajo de la 
    celda. En este ejemplo se crea un 
    c√≥digo simple de la serie 
    Fibonacci.
   2. 
   Markdown
    Markdown es un lenguaje de 
    marcado popular que es el 
    superconjunto del HTML. Jupyter 
    Notebook tambi√©n admite rebajas. 
    El tipo de celda se puede cambiar.
   2. 
   Markdown
   El encabezado se puede 
   agregar anteponiendo 
   cualquier l√≠nea con un 
   '#' √∫nico o m√∫ltiple 
   seguido de un espacio.
   2. 
   Markdown
   Se puede agregar Orden 
   de Jerarqu√≠a usando el 
   signo '*'. 
   2. 
   Markdown
   Permite a√±adir Ecuaciones en formato Latex y tablas
   3. Raw 
   Se proporcionan celdas sin 
   NBConverter
   procesar para escribir la salida 
   directamente. Esta celda no es 
   evaluada por el cuaderno de 
   Jupyter. Despu√©s de pasar por 
   nbconvert, las celdas sin formato 
   llegan a la carpeta de destino sin 
   ninguna modificaci√≥n.
        Kernel
    Kernel
    Un kernel se ejecuta detr√°s de cada 
    notebook. Siempre que se ejecuta 
    una celda, el c√≥digo dentro de la 
    celda se ejecuta dentro del kernel y 
    la salida se devuelve a la celda para 
    que se muestre.
    Entonces, si se importa un m√≥dulo en 
    una celda, ese m√≥dulo estar√° 
    disponible para todo el documento, 
    por ejemplo:
       Kernel
       Jupyter Notebook ofrece varias                    3. Reiniciar y ejecutar todo: Esto 
       opciones para kernels. Esto puede ser                har√° lo mismo que ‚ÄúReiniciar y 
       √∫til si se desea restablecer cosas. Las              borrar el output‚Äù, pero 
       opciones son:                                        tambi√©n ejecutar√° todas las 
         1. Reiniciar: Esto reiniciar√° los                  celdas en el orden de arriba 
            n√∫cleos, es decir, borrar√° todas                hacia abajo.
            las variables que se definieron,             4. Interrumpir: Esta opci√≥n 
            borrar√° los m√≥dulos que se                       interrumpir√° la ejecuci√≥n del 
            importaron, etc.                                 kernel. Puede ser √∫til en el 
         2. Reiniciar y borrar el output: Har√°               caso de que los programas 
            lo mismo que ‚ÄúReiniciar‚Äù, pero                   contin√∫en para su ejecuci√≥n 
            tambi√©n borrar√° toda la salida                   o si el kernel se atasca en 
            que se mostr√≥ debajo de la celda.                alg√∫n c√°lculo.
    Untitled.ipy
    Cuando se crea el cuaderno, 
    nb
    Jupyter Notebook nombra el 
    cuaderno como Untitled.ipynb de 
    forma predeterminada.
    Para cambiar el nombre del 
    cuaderno, simplemente haga clic 
    en la palabra Untitled.ipynb. Esto 
    abrir√° un cuadro de di√°logo 
    titulado ‚ÄúCambiar nombre del 
    cuaderno‚Äù. Ingrese el nombre 
    v√°lido para su cuaderno en la barra 
    de texto, luego haga clic en 
    Aceptar.
      Instalaci√≥n de 
    Jupyter notebooks, 
    uso de Google Colab
       Jupyter Notebooks
         Jupyter Notebook es una aplicaci√≥n 
         cliente-servidor lanzada en 2015 por la        Se ejecuta desde la aplicaci√≥n web cliente 
         organizaci√≥n sin √°nimo de lucro                que funciona en cualquier navegador 
         Proyecto Jupyter. Permite crear y              est√°ndar. 
         compartir documentos web en formato            El requisito previo es instalar y ejecutar en 
         JSON.                                          el sistema el servidor Jupyter Notebook 
         Tiene celdas que permiten almacenar            por medio de Anaconda (ver 
         c√≥digo, texto (en formato Markdown),           Instalacion Anaconda). 
         f√≥rmulas matem√°ticas y ecuaciones, o           Los documentos creados en Jupyter 
         tambi√©n contenido multimedia (Rich             pueden exportarse, entre otros formatos, 
         Media).                                        a HTML, PDF, Markdown o Python (-py 
                                                        o .ipynb) y tambi√©n pueden compartirse 
                                                        con otros usuarios por correo electr√≥nico, 
                                                        utilizando Dropbox o GitHub 
    Google Colab
    Para utilizarlo basta con acceder a 
    nuestra cuenta de Google y, o bien 
    entrar directamente al enlace de 
    Google Colab. 
    Otra opci√≥n es acceder a Google Drive, 
    pulsar el bot√≥n de ¬´Nuevo¬ª y 
    desplegar el men√∫ de ¬´M√°s¬ª, luego 
    seleccionar ¬´Colaboratory¬ª y crear un 
    nuevo cuaderno (notebook).
       Google Colab
       Cuando creamos un nuevo cuaderno,         La m√°quina en un inicio cuenta con 
       este es ¬´est√°tico¬ª, es decir, vemos su    12 GB de RAM y 50 GB de 
       contenido, pero no estamos conectados     almacenamiento en disco disponibles 
       a ning√∫n entorno de ejecuci√≥n.            para el uso.
       Nuestro cuaderno se conecta a una VM 
       de Google Compute Engine (la 
       infraestructura de m√°quinas virtuales 
       de Google en la nube) cuando 
       ejecutamos una celda o pulsamos sobre 
       el bot√≥n de ¬´Conectar¬ª.
      Actividad colaborativa
   C√°lculo de estad√≠stica descriptiva b√°sica
   Aplicando conceptos de programaci√≥n 
   estructurada para obtener res√∫menes 
   num√©ricos
   Duraci√≥n: 20 minutos
            ACTIVIDAD COLABORATIVA
       Optimizando el stock 
       para una PYME
       Consigna: Utilizaremos la informaci√≥n de      Ì±âÌ†Ω Crear una funci√≥n que itere sobre cada 
       la Clase 2 asociada con las acciones de       columna de las acciones e identifique 
       diversas compa√±√≠as para resolver las          valor maximo y minimo 
       siguientes consignas:                         Hint: Pueden usar las 
       Ì±âÌ†Ω Por medio de un ciclo (For o While)        funciones .mean(), .std(), .var(), .min(), .m
       obtener el promedio, desviaci√≥n est√°ndar      ax() de Pandas
       y varianza de cada una de las acciones en 
       cada columna                                  Se recomienda trabajar en grupos de 2 o 
                                                     3 estudiantes. 
       NOTA: usaremos los breakouts rooms. El tutor/a tendr√° el rol de facilitador/a.
        CLASE N¬∞3
        Glosario                                           If: estructura de selecci√≥n que permite extraer 
                                                           condiciones de inter√©s
        Estructura de control: nos permiten hacer          Funciones: estructuras de programaci√≥n con 
        operaciones repetitivas y nos dan orden y          nombre propio que reciben argumentos y arrojan 
        claridad en el c√≥digo, se dividen en selecci√≥n y   un resultado
        c√≠clicas, mientras que las m√°s comunes son (for, 
        while, if)                                         Tipos de datos: estructuras b√°sicas que 
                                                           permiten realizar operaciones (e.g. n√∫meros, 
        Estructuras de selecci√≥n: son aquellas que         bool, diccionarios, tuplas, listas, strings)
        nos permiten generar condiciones para una 
        operaci√≥n                                          Mutabilidad: cualquier objeto que sea 
                                                           susceptible de modificar sus valores luego de ser 
        Estructuras c√≠clicas: nos permiten realizar        creado
        operaciones repetitivas para una operaci√≥n
                                                           Tipos de celdad Jupyter notebook: pueden 
        For: estructura c√≠clica que repite varias veces    ser de tres tipos: 1) c√≥digo 2) Markdown (para 
        una tarea (hacer hasta)                            texto y opciones HTML) y 3) RawNBConverter 
        While: estructura de control c√≠clica que permite   (sin procesar que no tienen efecto en el c√≥digo) 
        hacer hasta que se cumpla una condici√≥n de 
        pare (hacer mientras)
     ¬øQuieres saber m√°s?
     Te dejamos material 
     ampliado de la clase
         MATERIAL AMPLIADO
     Recursos multimedia
      ‚úì Guia de instalaci√≥n Anaconda
      Disponible en nuestro repositorio.
      ¬øPreguntas?
                   Resumen 
               de la clase hoy
              ‚úì Nociones b√°sicas: Estructuras de Control, 
                Operadores y Funciones.
              ‚úì Tipos de datos 
              ‚úì Ipython trabajo con notebooks
              ‚úì Instalaci√≥n de Jupyter notebooks, uso de Google 
                Colab
      Opina y valora 
       esta clase
        Muchas 
        gracias.
